Truth Tables
A common way to show logical relationships is in truth tables.

Logical and (&&)
x	y	x and y
false	false	false
false	true	false
true	false	false
true	true	true
 

Logical or (||)
x	y	x or y
false	false	false
false	true	true
true	false	true
true	true	true






With list comprehension

squares = [n**2 for n in range(10)]
squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

w/o list comprehension

squares = []
for n in range(10):
    squares.append(n**2)
squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]



--------------------------------------------------------------------------------------------------------------------------------------


short_planets = [planet for planet in planets if len(planet) < 6]
short_planets
['Venus', 'Earth', 'Mars']


# str.upper() returns an all-caps version of a string
loud_short_planets = [planet.upper() + '!' for planet in planets if len(planet) < 6]
loud_short_planets
['VENUS!', 'EARTH!', 'MARS!']


--------------------------------------------------------------------------------------------------------------------------------------


s = 'steganograpHy is the practicE of conceaLing a file, message, image, or video within another fiLe, message, image, Or video.'
msg = ''
# print all the uppercase letters in s, one at a time
for char in s:
    if char.isupper():
        print(char, end='')      
		


--------------------------------------------------------------------------------------------------------------------------------------


i = 0
while i < 10:
    print(i, end=' ')
    i += 1 # increase the value of i by 1
0 1 2 3 4 5 6 7 8 9 


--------------------------------------------------------------------------------------------------------------------------------------


def word_search(doc_list, keyword):
      # list to hold the indices of matching documents
    indices = [] 
    # Iterate through the indices (i) and elements (doc) of documents
    for i, doc in enumerate(doc_list):
        # Split the string doc into a list of words (according to whitespace)
        tokens = doc.split()
        # Make a transformed list where we 'normalize' each word to facilitate matching.
        # Periods and commas are removed from the end of each word, and it's set to all lowercase.
        normalized = [token.rstrip('.,').lower() for token in tokens]
        # Is there a match? If so, update the list of matching indices.
        if keyword.lower() in normalized:
            indices.append(i)
    return indices
	

--------------------------------------------------------------------------------------------------------------------------------------


	